{"version":3,"sources":["smile.svg","Resume.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Resume","props","info","Object","values","location","index","value","person","data","profiles","console","log","className","src","icon","alt","basics","name","href","email","mobile","education","map","i","j","key","degree","percentage","Institute","skills","x","y","type","k","l","style","display","Profile","profile","exact","path","component","to","pathname","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,8MCgD5BC,EA5CJ,SAACC,GAER,IAAIC,EAAMC,OAAOC,OAAOH,EAAMI,SAASC,MAAMC,OACzCC,EAAOC,EAAKC,SAASR,GAEzB,OADAS,QAAQC,IAAIJ,GAER,yBAAKK,UAAU,UACX,yBAAKA,UAAU,SACX,yBAAKC,IAAKC,IAAMC,IAAI,YACpB,gCAAMR,EAAOS,OAAOC,KAApB,KACA,uBAAGC,KAAM,UAAUX,EAAOS,OAAOG,OAAjC,IAA2CZ,EAAOS,OAAOG,OACzD,6BACA,uBAAGD,KAAM,OAAOX,EAAOS,OAAOI,QAAUb,EAAOS,OAAOI,QACtD,8BAEJ,yBAAKR,UAAU,UACX,0DACCL,EAAOc,UAAUC,KAAI,SAACC,EAAEC,GAAH,OACtB,yBAAKC,IAAKD,GACN,4BAAKD,EAAEG,QACP,4BACI,4BAAKH,EAAEI,WAAW,KAClB,4BAAKJ,EAAEK,gBAIf,6BACA,sCACCrB,EAAOsB,OAAOP,KAAI,SAACQ,EAAEC,GAAH,OACf,6BACK,4BAAKD,EAAEE,MACNF,EAAE3B,OAAOmB,KAAI,SAACW,EAAEC,GAAH,OACX,yBAAKT,IAAKS,EAAGC,MACT,CACAC,QAAQ,WACR,0BAAMxB,UAAU,UAAUqB,cCR3CI,EAzBH,WACR,IAAMC,EAAQ9B,EAAKC,SACnB,OAEI,yBAAKG,UAAU,UACX,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,UAAUC,UAAW1C,KAEtCuC,EAAQhB,KAAI,SAACC,EAAEC,GAAH,OAET,yBAAKZ,UAAU,QAAQa,IAAKD,GACxB,yBAAKX,IAAKC,IAAMC,IAAI,YACpB,4BAAMQ,EAAEP,OAAOC,KAAf,KACA,6BACA,uBAAGC,KAAM,UAAUK,EAAEP,OAAOG,MAAOP,UAAU,SAASW,EAAEP,OAAOG,OAC/D,6BACA,uBAAGD,KAAM,OAAOK,EAAEP,OAAOI,OAAQR,UAAU,QAAQW,EAAEP,OAAOI,QAC5D,6BACA,kBAAC,IAAD,CAAMsB,GAAI,CAACC,SAAS,UAAUtC,MAAM,CAACC,MAAM,CAACkB,OAAMZ,UAAU,OAA5D,wBCVLgC,EARP,WACJ,OACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,UAAUC,UAAW1C,MCE3B8C,QACW,cAA7BC,OAAO1C,SAAS2C,UAEe,UAA7BD,OAAO1C,SAAS2C,UAEhBD,OAAO1C,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.74995534.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smile.47e603ff.svg\";","import React from 'react';\nimport data from './data.json';\nimport icon from \"./smile.svg\";\n\nlet Resume=(props)=>\n{\n    let info= Object.values(props.location.index.value);\n    let person=data.profiles[info];\n    console.log(person);\n    return (\n        <div className=\"parent\">\n            <div className=\"child\">\n                <img src={icon} alt=\"profile\"></img>\n                <h3> {person.basics.name} </h3>\n                <a href={\"mail to\"+person.basics.email} > {person.basics.email}</a>\n                <br></br>\n                <a href={\"tel:\"+person.basics.mobile} >{person.basics.mobile}</a>\n                <hr></hr>\n            </div>\n            <div className=\"child2\">\n                <h3>Educational Qualifications</h3>\n                {person.education.map((i,j) =>(\n                <div key={j}>\n                    <h4>{i.degree}</h4>\n                    <ul>\n                        <li>{i.percentage+\"%\"}</li>\n                        <li>{i.Institute}</li>\n                    </ul>\n                    </div>\n                ))}\n                <hr></hr>\n                <h3>Skills</h3>\n                {person.skills.map((x,y) =>(\n                    <div>\n                         <h4>{x.type}</h4>\n                         {x.values.map((k,l)=>(\n                            <div key={l} style={\n                                {\n                                display:\"inline\"}}> \n                                <span className=\"skills\">{k}</span>\n                             </div>\n                         ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\nexport default Resume;","import React from \"react\";\nimport data from \"./data.json\";\nimport icon from \"./smile.svg\";\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Resume from \"./Resume\";\n\nlet Profile=()=>{\n    const profile=data.profiles;\n    return(\n        \n        <div className=\"parent\">\n            <BrowserRouter>\n            <Route exact path=\"/resume\" component={Resume}></Route>\n            </BrowserRouter>\n            {profile.map((i,j) =>(\n                /* i for iteration variable and j for j for index value*/\n                <div className=\"child\" key={j} >\n                    <img src={icon} alt=\"profile\"></img>\n                    <h3 >{i.basics.name} </h3>\n                    <hr></hr>\n                    <a href={\"mail to\"+i.basics.email} className=\"link \">{i.basics.email}</a>\n                    <br></br>\n                    <a href={\"tel:\"+i.basics.mobile} className=\"link\">{i.basics.mobile}</a>\n                    <hr></hr>\n                    <Link to={{pathname:\"/resume\",index:{value:{j}}}} className=\"btn\"> View Profile </Link>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport Profile from './Profile';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport Resume from './Resume';\n\nlet App=()=>{\n    return(\n        <BrowserRouter>\n        <Route exact path=\"/\" component={Profile}></Route>\n        <Route exact path=\"/resume\" component={Resume}></Route>\n        </BrowserRouter>\n    )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}